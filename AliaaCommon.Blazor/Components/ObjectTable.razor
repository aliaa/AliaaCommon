@typeparam T
@using MongoDB.Bson.Serialization.Attributes
@inject NavigationManager nav

<div class="table-responsive @(StickyHead ? "tableFixHead" : "")" style="@(Height.HasValue && StickyHead ? $"height: {Height.Value}px;" : "") @(Width.HasValue ? $"width: {Width.Value}px;" : "")">
    <table class="table table-striped table-bordered table-sm" style="@(MinWidth != null ? $"min-width: {MinWidth.Value}px;" : "")">
        <thead>
            <tr>
                @if (ShowIndex)
                {
                    <th></th>
                }
                @if (LinkColumns != null)
                {
                    for (int i = 0; i < LinkColumns.Length; i++)
                    {
                        <th></th>
                    }
                }
                @if (ActionColumns != null)
                {
                    for (int i = 0; i < ActionColumns.Length; i++)
                    {
                        <th></th>
                    }
                }
                @foreach (var f in Fields)
                {
                    <th>@(DisplayUtils.DisplayName(f))</th>
                }
            </tr>
        </thead>
        <tbody>
            @{ int j = 0; }
            @foreach (var item in Data)
            {
                <tr>
                    @if (ShowIndex)
                    {
                        <td>@(j+1)</td>
                    }
                    @if (LinkColumns != null)
                    {
                        @foreach (var col in LinkColumns)
                        {
                            var url = col.Link.Replace("{" + col.KeyFieldName + "}", col.KeyField.GetValue(item).ToString());
                            <td>
                                <a href="@url" @onclick="() => HandleLinkClick(url)">
                                    @col.Text
                                </a>
                            </td>
                        }
                    }
                    @if (ActionColumns != null)
                    {
                        @foreach (var col in ActionColumns)
                        {
                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="() => HandleActionClick(col.Name, item)">@col.Text</button>
                            </td>
                        }
                    }
                    @foreach (var f in Fields)
                    {
                        var val = f.GetValue(item);
                        <td @attributes="CellAttrs(f.Name, j)">
                            @if (val is bool)
                            {
                                <input type="checkbox" disabled checked="@((bool)val)" />
                            }
                            else if (val is DateTime || (val != null && val is DateTime?))
                            {
                                if (val is DateTime?)
                                    val = ((DateTime?)val).Value;
                                if (ConvertDatesToPersion)
                                {
                                    @AliaaCommon.PersianDateUtils.GetPersianDateString((DateTime)val, !ShortDates);
                                }
                                else
                                {
                                    if (ShortDates)
                                    {
                                        @(((DateTime)val).ToShortDateString())
                                    }
                                    else
                                    {
                                        @val
                                    }
                                }
                            }
                            else if (f.PropertyType.IsEnum)
                            {
                                @DisplayUtils.DisplayName(f.PropertyType, val.ToString());
                            }
                            else
                            {
                                @val
                            }
                        </td>
                    }
                </tr>
                j++;
            }
        </tbody>
    </table>
</div>

@code {

    public class Column
    {
        public string Name { get; set; }
        public string Text { get; set; }
    }

    public class LinkColumn : Column
    {
        public string Link { get; set; }
        public string KeyFieldName { get; set; }

        private System.Reflection.PropertyInfo _keyField = null;

        public System.Reflection.PropertyInfo KeyField
        {
            get
            {
                if (_keyField == null)
                    _keyField = typeof(T).GetProperty(KeyFieldName);
                return _keyField;
            }
        }
    }

    [Parameter]
    public bool ShowIndex { get; set; }

    [Parameter]
    public bool StickyHead { get; set; }

    [Parameter]
    public int? Height { get; set; }

    [Parameter]
    public int? Width { get; set; }

    [Parameter]
    public int? MinWidth { get; set; }

    [Parameter]
    public IEnumerable<T> Data { get; set; }

    [Parameter]
    public string[] FieldNames { get; set; }

    [Parameter]
    public string[] ExcludeFieldNames { get; set; }

    [Parameter]
    public LinkColumn[] LinkColumns { get; set; }

    [Parameter]
    public Column[] ActionColumns { get; set; }

    [Parameter]
    public Dictionary<string, List<string>> ColumnsBackColor { get; set; }

    [Parameter]
    public bool ShortDates { get; set; } = true;

    [Parameter]
    public bool ConvertDatesToPersion { get; set; } = true;

    [Parameter]
    public EventCallback<KeyValuePair<string, T>> OnActionClick { get; set; }


    private List<System.Reflection.PropertyInfo> Fields;

    private static readonly Type[] AllowedTypes = new Type[]
    {
        typeof(string), typeof(int), typeof(long), typeof(float), typeof(double),
        typeof(int?), typeof(long?), typeof(float?), typeof(double?),
        typeof(DateTime), typeof(DateTime?)
        };

    protected override void OnInitialized()
    {
        Fields = new List<System.Reflection.PropertyInfo>();
        var props = typeof(T).GetProperties();
        if (FieldNames != null)
        {
            foreach (var f in FieldNames)
                Fields.Add(props.First(x => x.Name == f));
        }
        else
        {
            foreach (var p in props)
            {
                if ((AllowedTypes.Contains(p.PropertyType) || p.PropertyType.IsEnum) &&
                    (ExcludeFieldNames == null || !ExcludeFieldNames.Contains(p.Name)) &&
                    !p.CustomAttributes.Any(a => a.AttributeType == typeof(BsonIdAttribute)))
                {
                    var repAttr = p.GetCustomAttributes(typeof(BsonRepresentationAttribute), true).Cast<BsonRepresentationAttribute>().FirstOrDefault();
                    if (repAttr == null || repAttr.Representation != MongoDB.Bson.BsonType.ObjectId)
                        Fields.Add(p);
                }
            }
        }
    }

    private Dictionary<string, object> CellAttrs(string col, int index)
    {
        var dic = new Dictionary<string, object>(1);
        if (ColumnsBackColor != null && ColumnsBackColor.ContainsKey(col))
        {
            dic.Add("style", "background-color: " + ColumnsBackColor[col][index] + ";");
        }
        return dic;
    }

    private async Task HandleActionClick(string col, T item)
    {
        await OnActionClick.InvokeAsync(new KeyValuePair<string, T>(col, item));
    }

    private void HandleLinkClick(string url)
    {
        nav.NavigateTo(url, forceLoad: true);
    }
}
