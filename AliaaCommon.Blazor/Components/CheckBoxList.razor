@typeparam T
<div class="d-flex border rounded pt-3" style="@(MaxHeight != null ? $"max-height:{MaxHeight}px; overflow:auto;" : "")">
    <ul class="list-unstyled px-3 @(ColumnsCount != null ? "column-count:" + ColumnsCount : "")">
        @if (Data != null)
        {
            foreach (var item in Data)
            {
                var Text = TextField?.Invoke(item);
                var Value = ValueField?.Invoke(item).ToString();
                bool Checked = SelectedValues.Contains(Value);
                <li style="@(ColumnsCount == null ? $"float:right; width:{ItemWidth}em;" : "")">
                    <label class="d-block" style="@(Disabled ? "color:#6c757d;" : "")">
                        <input type="checkbox" checked=@Checked @onchange="e => { CheckboxClicked(Value, e.Value); }" disabled="@Disabled" />
                        @Text
                    </label>
                </li>
            }
        }
        @ChildContent
    </ul>
</div>

@code {

    [Parameter]
    public IEnumerable<T> Data { get; set; }

    [Parameter]
    public Func<T, string> TextField { get; set; }

    [Parameter]
    public Func<T, object> ValueField { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public List<string> SelectedValues { get; set; }

    [Parameter]
    public int? ColumnsCount { get; set; }

    [Parameter]
    public float? ItemWidth { get; set; } = 8;

    [Parameter]
    public int? MaxHeight { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback<List<string>> ChecksChanged { get; set; }

    public void CheckboxClicked(string value, object isChecked)
    {
        if ((bool)isChecked)
        {
            Console.WriteLine(value);
            if (!SelectedValues.Contains(value))
                SelectedValues.Add(value);
        }
        else
        {
            if (SelectedValues.Contains(value))
                SelectedValues.Remove(value);
        }
        StateHasChanged();
        ChecksChanged.InvokeAsync(SelectedValues);
    }
}  